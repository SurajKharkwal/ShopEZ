// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Order {
    id        String      @id @default(uuid())
    productId String
    status    OrderStatus
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
    orderedBy String
    PricePaid Int         @default(0)
    User      User        @relation(fields: [orderedBy], references: [id], onDelete: Cascade, onUpdate: Cascade)
    Products  Products    @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Products {
    id                     String      @id @default(uuid())
    title                  String
    price                  Int
    type                   ProductType
    imagePath              String[]
    color                  String?
    size                   String?
    description            String
    isAvailableforPurchase Boolean
    createdAt              DateTime    @default(now())
    updatedAt              DateTime    @updatedAt()
    about                  String[]
    managerId              String
    rating                 Int         @default(0)
    ratedby                Int         @default(0)
    Order                  Order[]
    User                   User        @relation(fields: [managerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    Cart                   Cart[]
    Review                 Review[]
}

model Review {
    id        String   @id @default(uuid())
    productId String
    product   Products @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId    String
    User      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model User {
    id        String     @id
    name      String
    role      Role       @default(User)
    email     String
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    Order     Order[]
    Products  Products[]
    Review    Review[]
    Cart      Cart[]
}

model Cart {
    id        String   @id @default(uuid())
    userId    String
    userPkey  User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    productId String
    product   Products @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum OrderStatus {
    Dileverd
    OnGoing
    Canceled
}

enum ProductType {
    Electronic
    Cosmatic
    Eatable
    Furniture
    Medecine
    Toy
    Sports
    AurVadic
    Others
}

enum Role {
    Admin
    Manager
    User
}
